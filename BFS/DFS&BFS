from collections import deque

n, m, v = map(int,input().split())

graph = [[] for _ in range(n+1)]

for _ in range(m):
    i, j = map(int, input().split())
    graph[i].append(j)
    graph[j].append(i)

visited = [False] * (n+1)

for i in range(n+1):
    graph[i].sort() 

def dfs(graph, v, visited):
    visited[v] = True #현재노드 방문처리
    print(v, end = ' ')
    for i in graph[v]:
        if not visited[i]:
            dfs(graph, i, visited)

def bfs(graph,v,visited):
    queue = deque([v])
    visited[v] = True
    while queue:
        v = queue.popleft()
        print(v, end = ' ')
        for i in graph[v]:
            if not visited[i]:
                queue.append(i)
                visited[i] = True

dfs(graph, v, visited)
print(sep = '\n')
visited = [False] * (n+1)
bfs(graph, v, visited)

#DFS와 BFS를 이용하여 해결하는 문제이다. DFS와 BFS를 정의할 수 만 있으면 쉽게 풀 수 있는 문제이다. 다만 그래프의 입력이 뒤죽박죽이므로 리스트 별로 정렬을 해주어야 한다.
