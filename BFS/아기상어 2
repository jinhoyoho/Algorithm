from collections import deque
import sys
input = sys.stdin.readline

def bfs(i, j):
    visited = [[False] * m for _ in range(n)] 
    visited[i][j] = True #방문
    q = deque()
    q.append((i, j)) #좌표 저장
    while q:
        y, x = q.popleft()
        for i in range(8):
            ny = y + dy[i]
            nx = x + dx[i]
            if 0 <= ny < n and 0 <= nx < m and not visited[ny][nx]:
                if graph[ny][nx] == 0: #0이라면
                    graph[ny][nx] = graph[y][x] + 1
                else:
                    graph[ny][nx] = min(graph[ny][nx], graph[y][x] + 1)
                visited[ny][nx] = True #방문
                q.append((ny,nx)) #저장
                    
n, m = map(int, input().split()) #가로m, 세로n
graph = list(list(map(int, input().split())) for _ in range(n))

dx = [-1, 1, 0, 0, 1, -1, 1, -1]
dy = [0, 0, 1, -1, 1, 1, -1, -1]

for i in range(n):
    for j in range(m):
        if graph[i][j] == 1:
            bfs(i, j)

result = 0
for i in range(n):
    for j in range(m):
            result = max(graph[i][j], result)

print(result-1)
