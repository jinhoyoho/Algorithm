import sys
from collections import deque
input = sys.stdin.readline

n = int(input()) #노드의 개수
graph = [[] for _ in range(n+1)] #2차원 리스트로 그래프 생성
result = [[] for _ in range(n+1)] #결과를 담을 2차원 리스트
visited = [False] * (n+1)

for _ in range(n-1):
    u, v = map(int, input().split())
    graph[u].append(v)
    graph[v].append(u) #노드 연결

queue = deque()
queue.append((1, graph[1]))
visited[1] = True
while queue:
    parent, current = queue.popleft()
    for node in current:
        if not visited[node]: #방문하지 않았다면
            result[node] = parent #결과 저장
            visited[node] = True #방문처리
            queue.append((node, graph[node]))
            
for i in range(2, n+1):
    print(result[i])
##print("\n".join(str(result[i]) for i in range(2, n+1)))## 반복문 한줄로 작성하기

#방향 상관없이 일단 저장하고 그 이후에 1부터 BFS를 통해서 결과를 따로 저장한다.
부모 노드와 현재 노드를 같이 저장해줌으로써 결과 리스트에 쉽게 저장할 수 있다.
