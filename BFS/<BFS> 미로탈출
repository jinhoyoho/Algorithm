from collections import deque

n, m = map(int, input().split())

maze = []
for i in range(n):
    maze.append(list(map(int,input())))

#이동할 네 방향 상, 하, 좌, 우 정의
dx = [-1, 1, 0, 0]
dy = [0, 0, -1, 1]

def bfs(x, y):
    #큐 규현을 위해 deque 사용
    queue = deque()
    queue.append((x,y))
    while queue:
        x, y = queue.popleft()
        #현재 위치에서 네 방향 위치 확인
        for i in range(4):
            nx = x + dx[i]
            ny = y + dy[i]
            #지도를 벗어난 경우
            if nx < 0 or nx >= n or ny < 0 or ny >= m :
                continue
            #괴물이 있는 경우
            if maze[nx][ny] == 0:
                continue
            #해당 노드를 처음 방문하는 경우에만 최단거리 기록
            if maze[nx][ny] == 1:
                maze[nx][ny] = maze[x][y] + 1
                queue.append((nx,ny))
    return maze[n-1][m-1]

print(bfs(0,0))


#BFS: 너비 우선 탐색, 가까운 노드부터 탐색한다. 주로 큐를 이용해서 문제를 해결한다. 큐는 deque를 이용하여 만든다.
#상, 하, 좌, 우 모두 갈 수 있는지 확인하고 갈 수 없거나 갈 수는 있지만 괴물이 있는경우 continue를 시행한다.
#갈 수 있고 한번도 가지 않았다면 가던 길에 +1을 중첩하면서 좌표를 저장한다.
