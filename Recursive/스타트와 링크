import itertools
import sys
input = sys.stdin.readline

n = int(input())
s = list(list(map(int, input().split())) for _ in range(n)) #능력치 저장
num_list = list(i for i in range(n))

combination = list(itertools.combinations(num_list, n//2))

start_team = list(combination[: len(combination)//2])
link_team = list(combination[len(combination)//2:])
link_team.reverse()

result = 987654321
for i in range(len(link_team)): #개수만큼 반복
    start = 0
    link = 0
    for j in range(len(start_team[i])):
        for k in range(len(start_team[i])):
            if j == k:
                continue
            start += s[start_team[i][j]][start_team[i][k]]
            link += s[link_team[i][j]][link_team[i][k]]
    result = min(result, abs(start - link))
            
print(result)

######해설######
#입력
import sys
input = sys.stdin.readline
N = int(input())
board = [list(map(int,input().split())) for _ in range(N)]
visited = [False for _ in range(N)]
INF = 2147000000
res = INF

#DFS
def DFS(L,idx):
    global res
    if L == N//2:
        A = 0
        B = 0
        for i in range(N):
            for j in range(N):
                if visited[i] and visited[j]:
                    A += board[i][j]
                elif not visited[i] and not visited[j]:
                    B +=board[i][j]
        res = min(res, abs(A-B))
        return
    for i in range(idx,N):
        if not visited[i]:
            visited[i] = True
            DFS(L+1,i+1)
            visited[i] = False
            
DFS(0,0)
print(res)
