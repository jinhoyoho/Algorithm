n, m = map(int, input().split())

#2차원 리스트의 맵 정보 받기
graph = []
for i in range(n):
    graph.append(list(map(int, input())))

def dfs(x,y):
    #주어진 범위를 벗어나는 경우에는 즉시 종료
    if x <= -1 or x >= n or y <= -1 or y >= m:
        return False
    #현재 노드를 방문하지 않았다면
    if graph[x][y] == 0:
        #해당 노드 방문처리
        graph[x][y] = 1
        #상, 하, 좌, 우 모두 재귀적으로 호출
        dfs(x - 1, y)
        dfs(x + 1, y)
        dfs(x, y - 1)
        dfs(x, y + 1)
        return True
    return False

result = 0
for i in range(n):
    for j in range(m):
        if dfs(i, j) == True:
            result += 1

print(result)

#DFS: 깊이 우선 탐색, 최대한 멀리 있는 노드를 우선으로 탐색한다. 주로 스택과 재귀를 이용하여 문제를 해결한다. 이 문제에서는 스택을 이용하진 않았다.
#n과 m, 그리고 graph를 받아준다. dfs함수를 정의해준다. x와 y 좌표가 범위에서 벗어나는 경우에는 즉시 종료시켜준다.
#return True를 맨 처음으로 호출된 함수만 True를 반환하게 된다.
