t = int(input())

while t:
    #주식 개수
    n = int(input())
    #주식 각각의 값
    stocks = list(map(int, input().split()))
    result = 0
    count = 0
    price = 0
    max = 0

    for i in range(n-1, 0, -1):
        #최댓값이 갱신되는 경우
        if max < stocks[i]:
            result += max * count - price
            price = 0
            count = 0
            max = stocks[i]
        #갱신이 안되는 경우
        else:
            price += stocks[i]
            count += 1
    
    #최댓값 갱신이 안되는 경우
    if max >= stocks[0]:
        count += 1
        price += stocks[0]
        result += max * count - price
    #제일 첫번째가 큰 수면
    else:
        result += max * count - price
    
    print(result)
   
    t -= 1
    
    
#파이썬 내장함수인 max함수는 시간복잡도가 O(n)인 함수이다. 따라서 반복문 안에 들어가게되면 시간복잡도가 O(n^2)이 되버려서 시간초과가 발생한다.
#시간복잡도가 초과가 된 경우에는 뒤에서부터 세던지, 아니면 시간복잡도를 줄이면 된다. 이 문제는 뒤에서부터 세는 방식을 채택했다.
#최댓값을 뒤에서부터 찾음으로써 max의 값이 변경될때 result값에 반영하고 아니면 계속 누적한다. 맨 처음 주식은 따로 알고리즘을 작성하였다.
