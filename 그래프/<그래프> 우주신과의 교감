##########
크루스칼 알고리즘 사용
##########

import math
import sys
input = sys.stdin.readline

def find_parent(parent, a):
    if parent[a] != a:
        parent[a] = find_parent(parent, parent[a])
    return parent[a]

def union_parent(parent, a, b):
    a = find_parent(parent, a)
    b = find_parent(parent, b)

    if a < b:
        parent[b] = a
    else:
        parent[a] = b

#두 좌표의 거리 공식
def distance(a, b):
    return math.sqrt(math.pow(a[0] - b[0], 2) + math.pow(a[1] - b[1], 2))

n, m = map(int, input().split()) #행성 개수 n, 이미 연결된 거리 m
parent = [0] * (n+1) #1~n까지 부모
result = 0 #결과
edges = [] #선들 저장
dots = [0] #좌표 저장
connects = [] #연결된 좌표 순서 저장

for i in range(1, n+1):
    parent[i] = i #부모 초기화

for _ in range(n): #n개의 좌표 저장
    dots.append(list(map(int, input().split())))
for _ in range(m): #m개의 연결된 거리 저장
    a, b = map(int, input().split())
    #작은 숫자가 먼저 앞으로 저장
    if a < b:
        connects.append((a, b))
    else:
        connects.append((b, a))

for i in range(1, n):
    for j in range(i, n+1):
        edges.append((distance(dots[i], dots[j]), i, j))

edges.sort() #오름차순 정렬
        
#연결된 두 좌표부터 먼저 저장
for connect in connects:
    a, b = connect
    union_parent(parent, a, b) #a와 b연결

for edge in edges:
    cost, a, b = edge
    if find_parent(parent, a) != find_parent(parent, b):
        union_parent(parent, a, b)
        result += cost

print('{:.2f}'.format(result))

#round함수를 사용했을시, 정수인 경우에 소수 첫째자리까지만 나오게 된다.
따라서 format을 이용해서 자리수를 명확히 표시하자.
