def find_parent(parent, x):
    if parent[x] != x:
        parent[x] = find_parent(parent, parent[x])
    return parent[x]

def union_parent(parent, a, b):
    a = find_parent(parent, a)
    b = find_parent(parent, b)

    if a < b: #a가 더 작으면
        parent[b] = a #a를 부모 노드로
    else:
        parent[a] = b

v, e = map(int, input().split()) #정점과 간선 개수
parent = [0] * (v+1)
edges = [] #간선을 담을 리스트
result = 0 #결과

for i in range(1, v+1):
    parent[i] = i

for _ in range(e):
    a, b, cost = map(int, input().split())
    edges.append((cost, a, b))

edges.sort() #오름차순 정렬

for edge in edges:
    cost, a, b = edge
    #사이클이 발생하지 않는 경우
    if find_parent(parent, a) != find_parent(parent, b):
        union_parent(parent, a, b) #합치기, 연결하기
        result += cost

print(result)
