import heapq
import sys
input = sys.stdin.readline
INF = int(1e9)

n, m = map(int, input().split())
start = int(input())
graph = [[] for _ in range(n+1)]
distance = [INF] * (n+1)

for _ in range(m):
    a, b, c = map(int, input().split())
    graph[a].append((b, c)) #a에서 b로 가는데 c만큼의 비용이 든다

def dijkstra(start):
    q = []
    heapq.heappush(q, (0, start)) #힙
    distance[start] = 0 #시작 거리 0
    while q:
        dist, now = heapq.heappop(q)
        if distance[now] < dist: #거리가 기존 거리보다 더 크다면
            continue
        for i in graph[now]:
            cost = dist + i[1] #거리의 합
            if cost < distance[i[0]]: #거리가 기존 거리보다 짧다면
                distance[i[0]] = cost
                heapq.heappush(q, (cost, i[0]))

dijkstra(start)

for i in range(1, n+1):
    if distance[i] == INF:
        print("INF")
    else:
        print(distance[i])
        
        
#힙을 이용하여 작성된 다익스트라 알고리즘 코드이다.
시간복잡도는 O(ElogV)만큼 소모된다.
