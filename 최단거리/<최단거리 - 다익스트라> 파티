import heapq
import sys
input = sys.stdin.readline
INF = int(1e9)

n, m, x = map(int, input().split())
graph = [[] for _ in range(n+1)] #1부터 n까지 노드 생성

for _ in range(m):
    a, b, c = map(int, input().split()) #a에서 b로 가는데 c만큼 비용이 든다
    graph[a].append((b, c))

def dijkstra(start):
    distance = [INF] * (n+1) #1부터 n까지 거리 생성
    q = []
    heapq.heappush(q, (0, start)) #start에서 start로 가는데 0만큼 소모
    distance[start] = 0 #시작 거리 0
    while q:
        dist, now = heapq.heappop(q)#거리와 현재 노드 출력
        if distance[now] < dist: #now로 가는 노드가 더 크다면
            continue
        for node in graph[now]:
            cost = dist + node[1] #거리추가
            if cost < distance[node[0]]:
                distance[node[0]] = cost #값 갱신
                heapq.heappush(q, (cost, node[0]))
    return distance
    
back = dijkstra(x) #돌아가는 거리
result = 0 #결과 값
for i in range(1, n+1):
    go = dijkstra(i) #x로 가는 거리
    result = max(go[x] + back[i], result)

print(result)

#모든 정점에 대해서 다익스트라를 실행해준다.
