###########
다익스트라 알고리즘
###########

import heapq
import sys
input = sys.stdin.readline
INF = 987654321

n, m = map(int, input().split()) #n개의 노드, m개의 길
graph = [[] for _ in range(n+1)] #n+1개의 정점 그래프
distance = [INF] * (n+1) #거리

for _ in range(m):
    a, b, c = map(int, input().split())
    graph[a].append((b, c)) #b로 가는 비용 c
    graph[b].append((a, c)) #a로 가는 비용 c

def dijkstra(start):
    q = []
    distance[start] = 0
    heapq.heappush(q, (0, start)) #(비용, 정점) 넣기
    while q:
        dist, now = heapq.heappop(q)
        if distance[now] > dist: #현재보다 거리가 크면
            continue #무시
        for i in graph[now]:
            cost = dist + i[1] #갈 경우 생기는 비용
            if cost < distance[i[0]]: #기존의 경우보다 거리가 짧다면
                distance[i[0]] = cost #새로운 방법으로 가기
                heapq.heappush(q, (cost, i[0]))

dijkstra(1) #1번노드부터 시작
print(distance[n])
