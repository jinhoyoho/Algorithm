array = [5, 7, 9, 0, 3, 1, 6, 2, 4, 8]

#가장 직관적인 형태의 퀵 정렬
def quick_sort(array, start, end):
    if start >= end:
        return  #원소가 1개인 경우 종료
    pivot = start
    left = start + 1
    right = end
    while left >= right:
        #피벗보다 큰 데이터를 찾을때까지 반복
        while left <= end and array[left] <= array[pivot]:
            left += 1
        #피벗보다 작은 데이터를 찾을때까지 반복
        while right > start and array[right] >= array[pivot]:
            right -= 1
        if left > right #엇갈렸다면 작은 데이터와 피벗을 교체
            array[right], array[pivot] = array[pivot], array[right]
        else: #엇갈리지 않았다면 작은 데이터와 큰 데이터를 교체
            array[left], array[right] = array[right], array[left]
    quick_sort(array, start, right - 1)
    quick_sort(array, right + 1, end)

quick_sort(array, 0, len(array) - 1)
print(array)


#파이썬의 장점을 살린 퀵 정렬
def quick_sort(array):
#리스트가 하나 이하의 원소만을 담고 있다면 종료
    if len(array) <= 1:
        return array
    
    pivot = array[0] #피벗은 첫번째 원소
    tail = array[1:] #피벗을 제외한 리스트
    
    left_side = [x for x in tail if x <= pivot] #분할된 왼쪽 부분
    right_side = [x for x in tail if x >= pivot] #분할된 오른쪽 부분
    
    return quick_sort(left_side) + [pivot] + quick_sort(right_side)

print(quick_sort(array))
        
        
#계수정렬

#모든 범위를 포함하는 리스트 선언(모든 값은 0으로 초기화))
count = [0] * max(array) + 1

for i in range(len(array) + 1):
    count[array[i]] += 1 #각 데이터에 해당하는 인덱스의 값 증가

for i in range(len(count)): #리스트에 기록된 정렬 정보 확인
    for j in range(count[i]):
        print(i, end = ' ') 
