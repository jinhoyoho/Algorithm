from collections import deque
import sys

def Disempty(queue): #empty 명령어
    if not queue: #비어있으면
        return 1
    else: #비어있지 않으면
        return 0

def Size(queue):
    return len(queue)

def Pop_front(queue): #pop명령어
    if Disempty(queue) == 1: #비어있으면
        return -1
    else:
        return queue.popleft() #맨 왼쪽 반환

def Pop_back(queue): #pop명령어
    if Disempty(queue) == 1: #비어있으면
        return -1
    else:
        return queue.pop() #맨 오른쪽 반환

def Front(queue):
    if Disempty(queue) == 1: #비어있으면
        return -1
    else:
        return queue[0] #맨 앞에 있는 정수

def Back(queue):
    if Disempty(queue) == 1:
        return -1
    else:
        return queue[-1] #맨 뒤에 있는 정수

def Push_front(queue, x):
    queue.appendleft(x)

def Push_back(queue, x):
    queue.append(x)

queue = deque()

n = int(sys.stdin.readline()) #n개의 명령어
for i in range(n):#n개의 명령어 실행
    command = sys.stdin.readline().split() #명령어 입력
    
    if command[0] == 'push_front': #push명령어 실행
        Push_front(queue, command[1])
    
    elif command[0] == 'push_back':
        Push_back(queue, command[1])
    
    elif command[0] == 'pop_front':
        print(Pop_front(queue))
    
    elif command[0] == 'pop_back':
        print(Pop_back(queue))
    
    elif command[0] == 'size':
        print(Size(queue))
    
    elif command[0] == 'empty':
        print(Disempty(queue))
    
    elif command[0] == 'front':
        print(Front(queue))
    
    elif command[0] == 'back':
        print(Back(queue))

#큐의 변형문제. 큐 자체를 덱을 이용하여 풀어서 금방 해결가능한 문제이다.
