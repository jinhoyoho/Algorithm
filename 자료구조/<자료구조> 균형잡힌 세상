while True:
    string = str(input()) #입력
    token = 0 #token 역할
    
    if string == '.': #.이면 종료
        break

    PT = list() #괄호를 담을 리스트

    for i in range(len(string)):
        if string[i] == '(' or string[i] == '[': #만약 (, [이면
            PT.append(string[i]) #담기
        elif string[i] == ']': #닫는 괄호라면
            if not PT: #PT가 비어있다면
                print("no")
                token = 1 #token -> 1
                break
            elif PT[-1] == '[': #짝이 맞을시
                PT.pop() #빼기
            elif PT[-1] == '(': #짝이 안맞을시
                print("no") 
                token = 1
                break

        elif string[i] == ')': #닫는 괄호라면
            if not PT: #PT가 비어있다면
                print("no")
                token = 1 #token -> 1
                break
            elif PT[-1] == '(': #짝이 맞을시
                    PT.pop()
            elif PT[-1] == '[': #짝이 안맞을시
                print("no")
                token = 1
                break

    if token == 1:
        continue
    elif PT:
        print("no")
    else: #PT가 비어있다면
        print("yes")
#작은 괄호 큰 괄호 따지지 말고 하나의 리스트를 이용하여 토큰을 사용해 문제를 해결하였다.
#for i in range(len(string))으로 쓸 필요없이 
for i in string으로만 써도 한글자 한글자를 참조할 수 있다..!

#모범답안 (시간은 똑같음)
while True :
    a = input()
    stack = []

    if a == "." :
        break

    for i in a :
        if i == '[' or i == '(' :
            stack.append(i)
        elif i == ']' :
            if len(stack) != 0 and stack[-1] == '[' :
                stack.pop() # 맞으면 지워서 stack을 비워줌 0 = yes
            else : 
                stack.append(']')
                break
        elif i == ')' :
            if len(stack) != 0 and stack[-1] == '(' :
                stack.pop()
            else :
                stack.append(')') #맞든 틀리든 그냥 쌓아버리기 (틀렸지만 쌓아버리기)
                break
    if len(stack) == 0 :
        print('yes')
    else :
        print('no')
